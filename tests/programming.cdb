
def test01():
    __cdbkernel__ = create_scope()
    
    def post_process(ex):
        distribute(ex)
        eliminate_kronecker(ex)
        sort_product(ex)
        canonicalise(ex)
        collect_terms(ex)

    \delta{#}::KroneckerDelta;
    \GAMMA{#}::GammaMatrix;
    ex:=\GAMMA^{m} \GAMMA^{n p q} \GAMMA^{n p q m r} \delta^{a b} \delta^{c r};
    display(ex)
    tst:= \GAMMA^{m} \GAMMA^{n p q} \GAMMA^{n p q m c} \delta^{a b} - @(ex);
    display(tst)
    assert(tst==0)
    print("Test 01 passed")

test01()

def test02():
    def orderx(var, n):
        cn=Ex(n)
        drop_weight(var, $field=@(cn)$)
        return var

    {A,B,C}::Weight(label=field, value=1);
    ex:=A B C + A B + A A + A C + A B C D;
    orderx(ex, 2)
    tst:= A B C + A B C D - @(ex);
    assert(tst==0)
    print("Test 02 passed")

test02()

def test03():
    __cdbkernel__ = create_scope()
    ex:= Q Q Q Q Q Q;
    converge(ex):
        substitute(_, $Q->A+B, A B->3$, repeat=True)
        distribute(_)
        
    tst:= A A A A A A + 18 A A A A + 135 A A + 540 + 18 B B B B + 135 B B + B B B B B B - @(ex);
    assert(tst==0)
    print("Test 03 passed")

test03()
