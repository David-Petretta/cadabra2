
def test01():
    __cdbkernel__ = create_scope()
    
    def post_process(ex):
        distribute(ex)
        eliminate_kronecker(ex)
        sort_product(ex)
        canonicalise(ex)
        collect_terms(ex)

    \delta{#}::KroneckerDelta;
    \GAMMA{#}::GammaMatrix;
    ex:=\GAMMA^{m} \GAMMA^{n p q} \GAMMA^{n p q m r} \delta^{a b} \delta^{c r};
    display(ex)
    tst:= \GAMMA^{m} \GAMMA^{n p q} \GAMMA^{n p q m c} \delta^{a b} - @(ex);
    display(tst)
    assert(tst==0)
    print("Test 01 passed")

test01()

def test02():
    def orderx(var, n):
        cn=Ex(n)
        drop_weight(var, $field=@(cn)$)
        return var

    {A,B,C}::Weight(label=field, value=1);
    ex:=A B C + A B + A A + A C + A B C D;
    orderx(ex, 2)
    tst:= A B C + A B C D - @(ex);
    assert(tst==0)
    print("Test 02 passed")

test02()

def test03():
    __cdbkernel__ = create_scope()
    ex:= Q Q Q Q Q Q;
    converge(ex):
        substitute(_, $Q->A+B, A B->3$, repeat=True)
        distribute(_)
        
    tst:= A A A A A A + 18 A A A A + 135 A A + 540 + 18 B B B B + 135 B B + B B B B B B - @(ex);
    assert(tst==0)
    print("Test 03 passed")

test03()


# 
# \partial{#}::PartialDerivative;        
# ex:=A_{m n} \partial_{r}{ B^{m n} } \partial^{r}{ Q } + \partial_{m}{ A^{m} } R;  
# num=1
# for partial in ex["\\partial"]:
#     partial.name="k"+str(num)
#     num+=1
# 
# ex;
#     
# # this one still not working?! Does not stop and restart at second product.
# \partial{#}::PartialDerivative;        
# ex:=A_{m n} \partial_{r}{ B^{m n} } \partial^{r}{ Q } + \partial_{m}{ A^{m} } R;  
# for prod in ex["\\prod"]:
#     num=1
#     for partial in prod["\\partial"]:
#         partial.name="k"+str(num)
#         num+=1
# 
# ex;
# print(tree(ex))
#     
# 
# \partial{#}::PartialDerivative;        
# ex:=A_{m n} \partial_{r}{ 3 B^{m n} } \partial^{r}{ 2 Q } + \partial_{m}{ 5 A^{m} } R;  
# for prod in ex["\\prod"]:
#     num=1
#     for partial in prod["\\partial"]:
#         for index in partial.indices():
#             print(index)
#             num+=1
# 
# ex;
# print(tree(ex))
#   

def test04():
    __cdbkernel__ = create_scope()
    \partial{#}::PartialDerivative;
    \dot{#}::Accent;
    NoMomList= [ Ex(r'A_{a? b?}'), Ex(r'S'), Ex(r'a**2') ]
    ex:=Q_{m n \dot{r} p q s_{2} k} + a**2 A_{m n} \partial_{\dot{r}}{ B_{p q} } S \partial_{s_{2}}{ C } \partial_{0}{D_{k}} ;
    terms=ex["\\sum"].__next__().children()
    for term in terms:
        if term.name=="\\prod":
            num=1
            for factor in term.children():
                if factor.name=="\\partial":
                    for index in factor.indices():
                        k = Ex("k"+str(num))
                        factor.insert(k).append_child(index)
                    for arg in factor.args():
                        matches = map(lambda x: x.matches(factor), NoMomList)
                        if not True in matches:
                             arg.append_child(Ex("k"+str(num)))
                             factor.insert(arg)
                    factor.erase()
                    num+=1
                else:
                     matches = map(lambda x: x.matches(factor), NoMomList)
                     if not True in matches:
                        factor.append_child(Ex("k"+str(num)))
                        num+=1
        else:
            term.append_child(Ex("k1"))
    
    tst:= Q_{m n \dot{r} p q s_{2} k}(k1) + a**2 A_{m n} k1_{\dot{r}} B_{p q}(k1) S k2_{s_{2}} C(k2) k3_{0} D_{k}(k3) - @(ex);
    assert(tst==0)
    print("Test 04 passed")

test04()
        

# ex:=A + B + C;
# for sum in ex["\\sum"]:
#     for term in sum[""]:
#         print(term.name)
# 
