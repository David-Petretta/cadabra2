{
	"cell_id" : 2699372611842746848,
	"cells" : 
	[
		{
			"cell_id" : 5937432672654218849,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def time_algo(algo, ex, *args, iterations=100):\n\t\"\"\"\n\tSimple function to time the execution of an algorithm with given inputs.\n\tThe arguments in *args are passed directly, but ex is copied before each\n\tinvocation and so remains unmodified. \n\n\tExample usage:\n\t\ttime_algo(sort_sum, $b + d + e + a$, iterations=20)\n\t\"\"\"\n\ts = Stopwatch()\n\tfor i in range(iterations):\n\t\ttmp := @(ex);\n\t\ts.start()\n\t\talgo(tmp, *args)\n\t\ts.stop()\n\treturn (s.seconds() + s.useconds() / 1000000) / iterations"
		},
		{
			"cell_id" : 15123798302514262900,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def test_algo(expected):\n\t\"\"\"\n\tDecorator to aid defining unit tests for algorithms. This\n\tadds the boilerplate code and adds an assert for the test.\n\n\tExample usage:\n\t\t@test_algo($a + b + c$)\n\t\tdef sort_sum_test():\n\t\t\tex := b + a + c.\n\t\t\treturn sort_sum(ex)\n\t\"\"\"\n\tdef bind_args(func):\n\t\tdef test_wrapper(*args, **kwargs):\n\t\t\t__cdbkernel__ = cadabra2.__cdbkernel__\n\t\t\tresult = func(*args, **kwargs)\n\t\t\tassert result == expected, f\"Failed test: expected \\u0024{expected}\\u0024\"  \\\n\t\t\t\t\t\t\t\t\tf\" but got \\u0024{result}\\u0024\"\n\t\t\treturn True\n\t\treturn test_wrapper\n\treturn bind_args"
		},
		{
			"cell_id" : 460414117077303111,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : ""
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1
}
