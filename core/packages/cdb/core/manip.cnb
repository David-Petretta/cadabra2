{
	"cells" : 
	[
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\subsection*{Manipulating equations, inequalities and similar expressions}\n\\begin{itemize}\n\\item \n\t\\texttt{eq\\_to\\_subrule(ex : Ex) -> Ex} \\\\ \n\tCreates a substitution rule from an equation \\texttt{ex}. \\\\\n\t\\quad Example: \\texttt{eq\\_to\\_subrule(\\textdollar a = b + c + d\\textdollar) -> \\textdollar b + c + d -> a\\textdollar}\n\\item\n\t\\texttt{multiply\\_through(ex : Ex\\&, factor : Ex, auto\\_distribute = False : Boolean) -> Ex} \\\\\n\tMultiplies all terms in \\texttt{ex} by \\texttt{factor}. If \\texttt{auto\\_distribute} is \\texttt{True}, distribute is called on the resulting expression.\\\\\n\t\\quad Example: \\texttt{multiply\\_through(\\textdollar a + b < c\\textdollar, \\textdollar k\\textdollar) -> \\textdollar ka + ka < kc\\textdollar}\n\\item\n\t\\texttt{get\\_lhs(ex : Ex) -> Ex} \\\\\n\tReturns the left hand side of an equation, inequality or expression whose top node contains two children. \\\\\n\t\\quad Example: \\texttt{get\\_lhs(\\textdollar a = b\\textdollar) -> \\textdollar a\\textdollar}\n\\item\n\t\\texttt{get\\_rhs(ex : Ex) -> Ex} \\\\\n\tComplement of \\texttt{get\\_lhs}\n\\item\n\t\\texttt{swap\\_sides(ex : Ex\\&) -> Ex} \\\\\n\tSwaps the two sides of an equation, inequality or expression whose top node contains two children. Inequalities will flip as appropriate. \\\\\n\t\\quad Example 1: \\texttt{swap\\_sides(\\textdollar a = b\\textdollar) -> \\textdollar b = a\\textdollar} \\\\\n\t\\quad Example 2: \\texttt{swap\\_sides(\\textdollar a < b\\textdollar) -> \\textdollar b > a\\textdollar}\n\\item\n\t\\texttt{to\\_rhs(ex : Ex\\&, part : Ex) -> Ex} \\\\\n\tIf \\texttt{ex} is an equation or inequality which contains \\texttt{part} on its left hand side, then moves \\texttt{part} to the right hand side. \n\t\\texttt{part} must contain the multiplier of the term to be moved, including minus signs. \\\\\n\t\\quad Example 1: \\texttt{to\\_rhs(\\textdollar a + b = c + d\\textdollar, \\textdollar b\\textdollar) -> \\textdollar a = c + d - b\\textdollar} \\\\\n\t\\quad Example 2: \\texttt{to\\_rhs(\\textdollar a - b = c\\textdollar, \\textdollar -b\\textdollar) -> \\textdollar a = c + b\\textdollar}\n\\item\n\t\\texttt{to\\_lhs(ex : Ex\\&, part : Ex) -> Ex} \\\\\n\tComplement of \\texttt{to\\_rhs}\n\\end{itemize}"
				}
			],
			"hidden" : true,
			"source" : "\\subsection*{Manipulating equations, inequalities and similar expressions}\n\\begin{itemize}\n\\item \n\t\\texttt{eq\\_to\\_subrule(ex : Ex) -> Ex} \\\\ \n\tCreates a substitution rule from an equation \\texttt{ex}. \\\\\n\t\\quad Example: \\texttt{eq\\_to\\_subrule(\\textdollar a = b + c + d\\textdollar) -> \\textdollar b + c + d -> a\\textdollar}\n\\item\n\t\\texttt{multiply\\_through(ex : Ex\\&, factor : Ex, auto\\_distribute = False : Boolean) -> Ex} \\\\\n\tMultiplies all terms in \\texttt{ex} by \\texttt{factor}. If \\texttt{auto\\_distribute} is \\texttt{True}, distribute is called on the resulting expression.\\\\\n\t\\quad Example: \\texttt{multiply\\_through(\\textdollar a + b < c\\textdollar, \\textdollar k\\textdollar) -> \\textdollar ka + ka < kc\\textdollar}\n\\item\n\t\\texttt{get\\_lhs(ex : Ex) -> Ex} \\\\\n\tReturns the left hand side of an equation, inequality or expression whose top node contains two children. \\\\\n\t\\quad Example: \\texttt{get\\_lhs(\\textdollar a = b\\textdollar) -> \\textdollar a\\textdollar}\n\\item\n\t\\texttt{get\\_rhs(ex : Ex) -> Ex} \\\\\n\tComplement of \\texttt{get\\_lhs}\n\\item\n\t\\texttt{swap\\_sides(ex : Ex\\&) -> Ex} \\\\\n\tSwaps the two sides of an equation, inequality or expression whose top node contains two children. Inequalities will flip as appropriate. \\\\\n\t\\quad Example 1: \\texttt{swap\\_sides(\\textdollar a = b\\textdollar) -> \\textdollar b = a\\textdollar} \\\\\n\t\\quad Example 2: \\texttt{swap\\_sides(\\textdollar a < b\\textdollar) -> \\textdollar b > a\\textdollar}\n\\item\n\t\\texttt{to\\_rhs(ex : Ex\\&, part : Ex) -> Ex} \\\\\n\tIf \\texttt{ex} is an equation or inequality which contains \\texttt{part} on its left hand side, then moves \\texttt{part} to the right hand side. \n\t\\texttt{part} must contain the multiplier of the term to be moved, including minus signs. \\\\\n\t\\quad Example 1: \\texttt{to\\_rhs(\\textdollar a + b = c + d\\textdollar, \\textdollar b\\textdollar) -> \\textdollar a = c + d - b\\textdollar} \\\\\n\t\\quad Example 2: \\texttt{to\\_rhs(\\textdollar a - b = c\\textdollar, \\textdollar -b\\textdollar) -> \\textdollar a = c + b\\textdollar}\n\\item\n\t\\texttt{to\\_lhs(ex : Ex\\&, part : Ex) -> Ex} \\\\\n\tComplement of \\texttt{to\\_rhs}\n\\end{itemize}"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "from cdb.utils.node import nth_arg, n_args"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def eq_to_subrule(ex):\n\t\"\"\"Turns $a = b$ into $b -> a$\"\"\"\n\tif ex.head() != r'\\equals':\n\t\traise Exception(\"eq_to_subrule called on expression which is not an equation\")\n\tif n_args(ex.top()) != 2:\n\t\traise Exception(\"eq_to_subrule called on expression whose top node contains {} arguments, 2 required\".format(n_args(ex.top())))\n\n\t# Get the lhs and rhs\n\tfor i, arg in enumerate(ex.top().args()):\n\t\tif i == 0:\n\t\t\tlhs = $@(arg)$\n\t\telif i == 1:\n\t\t\trhs = $@(arg)$\n\n\t# Substitute them into a subrule\n\treturn $@(rhs) -> @(lhs)$"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def multiply_through(ex, factor, auto_distribute = False):\n\t\"\"\"Multiplies all terms in ex by factor\"\"\"\n\tfor arg in ex.top().args():\n\t\targ.replace($@(factor) @(arg)$)\n\tif auto_distribute:\n\t\tdistribute(ex)\n\treturn ex"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def get_lhs(ex):\n\t\"\"\"Returns the left hand side of an equation, inequality, or expression whose top node contains two arguments\"\"\"\n\tif n_args(ex.top()) != 2:\n\t\traise Exception(\"get_lhs called on expression whose top node contains {} arguments, 2 required\".format(n_args(ex.top())))\n\n\tlhs = nth_arg(ex.top(), 0)\n\treturn $@(lhs)$"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def get_rhs(ex):\n\t\"\"\"Returns the left hand side of an equation, inequality, or expression whose top node contains two arguments\"\"\"\n\tif n_args(ex.top()) != 2:\n\t\traise Exception(\"get_lhs called on expression whose top node contains {} arguments, 2 required\".format(n_args(ex.top())))\n\n\trhs = nth_arg(ex.top(), 1)\n\treturn $@(rhs)$"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def swap_sides(ex):\n\t\"\"\"Swaps the left and right hand sides of an equation, inequality or expression whose top node contains two arguments\"\"\"\n\tif n_args(ex.top()) != 2:\n\t\traise Exception(\"swap_sides called on expression whose top node contains {} arguments, 2 required\".format(n_args(ex.top())))\n\n\t# Get the lhs and rhs\n\tlhs = get_lhs(ex)\n\trhs = get_rhs(ex)\n\n\t# Iterate through both sides of the equation and perform substitution\n\tfor i, arg in enumerate(ex.top().args()):\n\t\tif i == 0:\n\t\t\targ.replace(rhs)\n\t\tif i == 1:\n\t\t\targ.replace(lhs)\n\n\t# Swap inequalities\n\tif ex.head() == r'\\less':\n\t\tex.top().name = r'\\greater'\n\telif ex.head() == r'\\greater':\n\t\tex.top().name = r'\\less'\n\n\treturn ex"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def to_rhs(ex, part, auto_simplify = True):\n\t\"\"\"Moves part from the left to the right hand side of an equation or inequality\"\"\"\n\n\t# If the part to move is a sum then split into individual terms and call to_rhs on them\n\tif part.head() == r'\\sum':\n\t\tfor arg in part.top().args():\n\t\t\tto_rhs(ex, $@(arg)$, auto_simplify)\n\t\treturn ex\n\n\tif ex.head() not in [r'\\equals', r'\\less', r'\\greater']:\n\t\traise Exception(\"to_lhs called on expression which is not an equation or inequality\")\n\tif n_args(ex.top()) != 2:\n\t\traise Exception(\"to_rhs called on expression whose top node contains {} arguments, 2 required\".format(n_args(ex.top())))\n\n\tlhs = nth_arg(ex.top(), 0)\n\tfound = False\n\n\t# If lhs is a sum, then try to move one of the arguments of that sum\n\tif lhs.name == r'\\sum':\n\t\tfor arg in lhs.args():\n\t\t\tif $@(arg)$ == part:\n\t\t\t\tfound = True\n\t\t\t\trhs = nth_arg(ex.top(), 1)\n\t\t\t\tnth_arg(ex.top(), 1).replace($@(rhs) - @(arg)$)\n\t\t\t\targ.erase()\n\t# If it wasn't found in the sum, then see if the thing we are trying to move is the\n\t# entire left hand side\n\tif not found:\n\t\tif $@(lhs)$ == part:\n\t\t\trhs = nth_arg(ex.top(), 1)\n\t\t\tnth_arg(ex.top(), 1).replace($@(rhs) - @(lhs)$)\n\t\t\tnth_arg(ex.top(), 0).replace($0$)\n\n\treturn ex"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def to_lhs(ex, part):\n\t\"\"\"Moves part from the right to the left hand side of an equation or inequality\"\"\"\n\t# to_lhs is the same as to_rhs called on an equation with the sides swapped ;)\n\tswap_sides(ex)\n\tto_rhs(ex, part)\n\tswap_sides(ex)\t\n\treturn ex"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "a = c + d + b"
						}
					],
					"source" : "\\begin{dmath*}{}a = c+d+b\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : " = c + d + b-a"
						}
					],
					"source" : "\\begin{dmath*}{} = c+d+b-a\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "-d-b = c-a"
						}
					],
					"source" : "\\begin{dmath*}{}-d-b = c-a\\end{dmath*}"
				}
			],
			"source" : "# Moving terms test\nif __name__ == \"__main__\":\n\tex0 := a - b = c + d;\n\tto_rhs(ex0, $-b$);\n\tto_rhs(ex0, $a$);\n\tto_lhs(ex0, $d + b$);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "c → a_{\\mu} a^{\\mu} + b"
						}
					],
					"source" : "\\begin{dmath*}{}c \\rightarrow a_{\\mu} a^{\\mu}+b\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "a_{\\mu} a^{\\mu} + b"
						}
					],
					"source" : "\\begin{dmath*}{}a_{\\mu} a^{\\mu}+b\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "c"
						}
					],
					"source" : "\\begin{dmath*}{}c\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "k_{\\alpha} (a_{\\mu} a^{\\mu} + b) = k_{\\alpha} c"
						}
					],
					"source" : "\\begin{dmath*}{}k_{\\alpha} \\left(a_{\\mu} a^{\\mu}+b\\right) = k_{\\alpha} c\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "k_{\\alpha} c = k_{\\alpha} (a_{\\mu} a^{\\mu} + b)"
						}
					],
					"source" : "\\begin{dmath*}{}k_{\\alpha} c = k_{\\alpha} \\left(a_{\\mu} a^{\\mu}+b\\right)\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "k_{\\alpha} (a_{\\mu} a^{\\mu} + b) = k_{\\alpha} c"
						}
					],
					"source" : "\\begin{dmath*}{}k_{\\alpha} \\left(a_{\\mu} a^{\\mu}+b\\right) = k_{\\alpha} c\\end{dmath*}"
				}
			],
			"source" : "# Equation test\nif __name__ == \"__main__\":\n\tex1 := a_{\\mu}a^{\\mu} + b = c;\n\teq_to_subrule(ex1);\n\tget_lhs(ex1);\n\tget_rhs(ex1);\n\tmultiply_through(ex1, $k_{\\alpha}$);\n\tswap_sides(ex1);\n\tswap_sides(ex1);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "w_{f}-w_{i}"
						}
					],
					"source" : "\\begin{dmath*}{}w_{f}-w_{i}\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "2\\pi W_{a b} \\beta^{a} \\beta^{b}"
						}
					],
					"source" : "\\begin{dmath*}{}2\\pi W_{a b} \\beta^{a} \\beta^{b}\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\less(2\\pi W_{a b} \\beta^{a} \\beta^{b} , w_{f}-w_{i})"
						}
					],
					"source" : "\\begin{dmath*}{}2\\pi W_{a b} \\beta^{a} \\beta^{b} < w_{f}-w_{i}\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\greater(w_{f}-w_{i} , 2\\pi W_{a b} \\beta^{a} \\beta^{b})"
						}
					],
					"source" : "\\begin{dmath*}{}w_{f}-w_{i} > 2\\pi W_{a b} \\beta^{a} \\beta^{b}\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\greater(2n (w_{f}-w_{i}) , 4n \\pi W_{a b} \\beta^{a} \\beta^{b})"
						}
					],
					"source" : "\\begin{dmath*}{}2n \\left(w_{f}-w_{i}\\right) > 4n \\pi W_{a b} \\beta^{a} \\beta^{b}\\end{dmath*}"
				}
			],
			"source" : "# Inequality test\nif __name__ == \"__main__\":\n\t{f, i}::Symbol.\n\tex2 := w_{f} - w_{i} > 2 \\pi W_{a b}\\beta^{a}\\beta^{b};\n\tget_lhs(ex2);\n\tget_rhs(ex2);\n\tswap_sides(ex2);\n\tswap_sides(ex2);\n\tmultiply_through(ex2, $2n$);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}eq_to_subrule called on expression which is not an equation\\end{verbatim}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}get_lhs called on expression whose top node contains 3 arguments, 2 required\\end{verbatim}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}get_lhs called on expression whose top node contains 3 arguments, 2 required\\end{verbatim}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}swap_sides called on expression whose top node contains 3 arguments, 2 required\\end{verbatim}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}to_lhs called on expression which is not an equation or inequality\\end{verbatim}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}swap_sides called on expression whose top node contains 3 arguments, 2 required\\end{verbatim}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "verbatim",
					"source" : "\\begin{verbatim}name 'get_component' is not defined\\end{verbatim}"
				}
			],
			"source" : "# Fail tests\nif __name__ == \"__main__\":\n\tex3 := a, b, c;\n\ttry:\n\t\teq_to_subrule(ex3)\n\texcept Exception as e:\n\t\te;\n\t\n\ttry:\n\t\tget_lhs(ex3)\n\texcept Exception as e:\n\t\te;\n\n\ttry:\n\t\tget_rhs(ex3)\n\texcept Exception as e:\n\t\te;\n\n\ttry:\n\t\tswap_sides(ex3)\n\texcept Exception as e:\n\t\te;\n\n\ttry:\n\t\tto_rhs(ex3, $a$)\n\texcept Exception as e:\n\t\te;\n\n\ttry:\t\n\t\tto_lhs(ex3, $b$)\n\texcept Exception as e:\n\t\te;\n\n\ttry:\n\t\tt::Coordinate.\n\t\t{i, j}::Indices(values={t}, position=fixed).\n\t\tex := a_{i}.\n\t\tevaluate(ex, ${a_{t} = 1}$)\n\t\tget_component(ex, $x$)\n\texcept Exception as e:\n\t\te;"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : ""
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1
}
