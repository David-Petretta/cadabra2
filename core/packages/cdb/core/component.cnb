{
	"cell_id" : 2591451759941222879,
	"cells" : 
	[
		{
			"cell_id" : 11457506631850813640,
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_id" : 10008607845695988739,
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\package{cdb.core.component}{Simple access to component expressions}\n\nThis package contains helper functions to access components of tensors, as they are computed by e.g.~\\algo{evaluate}."
				}
			],
			"hidden" : true,
			"source" : "\\package{cdb.core.component}{Simple access to component expressions}\n\nThis package contains helper functions to access components of tensors, as they are computed by e.g.~\\algo{evaluate}."
		},
		{
			"cell_id" : 6181105877766386294,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "from cdb.utils.node import nth_arg, n_args"
		},
		{
			"cell_id" : 11505235534497815577,
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_id" : 13577366159339639059,
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\algorithm{get_component(ex: Ex, component: Ex) -> Ex}{Extract a single component from an expression.}\n\nGets a component of an expression resulting from an \\algo{evaluate} command. \nThe \\verb|component| argument for vector-like objects should be e.g.~\\verb|$t$|,\nand for higher-rank tensors like e.g.~\\verb|$x, t$|."
				}
			],
			"hidden" : true,
			"source" : "\\algorithm{get_component(ex: Ex, component: Ex) -> Ex}{Extract a single component from an expression.}\n\nGets a component of an expression resulting from an \\algo{evaluate} command. \nThe \\verb|component| argument for vector-like objects should be e.g.~\\verb|$t$|,\nand for higher-rank tensors like e.g.~\\verb|$x, t$|."
		},
		{
			"cell_id" : 2743671539812446348,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def get_component(ex, components):\n\t\"\"\"Gets a particular component of an expression\"\"\"\n\t# The components paramater needs to have a head '\\comma' node\n\t# so let's quickly make sure that's true.\n\tif components.head() != r'\\comma':\n\t\tbit = $@(components)$\n\t\tcomponents.top().name = r'\\comma'\n\t\tcomponents.top().append_child(bit)\n\n\t# If this module is imported, Cadabra might complain that the components are \n\t# free indices, so we need to tell it that the the components are coordinates\n\t#Coordinate(components, $ $)\t\n\n\t# Extract when components is the head object\n\tif ex.head() == r'\\components':\n\t\t# Sift through all the '\\equals' nodes until we\n\t\t# find the one we want\n\t\tfor node in ex.top()[r'\\equals']:\n\t\t\targ = nth_arg(node, 0)\n\t\t\tif $@(arg)$ == components:\n\t\t\t\tres = nth_arg(node, 1)\n\t\t\t\treturn $@(res)$\n\t\t# Couldn't find that component :(\n\t\traise Exception(\"Component {} not found in expression\".format(str(components)))\n\t# Extract from something multiterm\n\telse:\n\t\t# Start the expression as a comma for convenience, we will change\n\t\t# this to the head node of the expression at the end\n\t\tres = $\\comma$\n\t\tfor node in ex.top().args():\n\t\t\tif node.name == r'\\components':\n\t\t\t\tterm = get_component($@(node)$, components)\n\t\t\telse:\n\t\t\t\tterm = $@(node)$\n\t\t\tres.top().append_child(term)\n\t\tres.top().name = ex.top().name\n\t\treturn res"
		},
		{
			"cell_id" : 3091027410461552154,
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_id" : 13790438723981981433,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property Coordinate to~}\\left[t,~\\discretionary{}{}{} x\\right].\\end{dmath*}"
				},
				{
					"cell_id" : 6585730608062079511,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property Indices(position=free) to~}\\left[i,~\\discretionary{}{}{} j\\right].\\end{dmath*}"
				},
				{
					"cell_id" : 4687258342932784630,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 2882509989814794757,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "a_{i}"
						}
					],
					"source" : "\\begin{dmath*}{}a_{i}\\end{dmath*}"
				},
				{
					"cell_id" : 4500686143986621624,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 762773063794805061,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\components_{i}({{t} = 1, {x} = 2})"
						}
					],
					"source" : "\\begin{dmath*}{}\\square{}_{i}\\left\\{\\begin{aligned}\\square{}_{t}= & 1\\\\[-.5ex]\n\\square{}_{x}= & 2\\\\[-.5ex]\n\\end{aligned}\\right.\n\\end{dmath*}"
				}
			],
			"ignore_on_import" : true,
			"source" : "{t,x}::Coordinate;\n{i,j}::Indices(values={t,x});\nex:= a_{i};\nevaluate(ex, $a_{t}=1, a_{x}=2$);"
		},
		{
			"cell_id" : 5606391277831315157,
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_id" : 5509550843997306103,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 1441692765197866998,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "2"
						}
					],
					"source" : "\\begin{dmath*}{}2\\end{dmath*}"
				}
			],
			"ignore_on_import" : true,
			"source" : "get_component(ex, $x$);"
		},
		{
			"cell_id" : 16409402158754707338,
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_id" : 17939170552338832337,
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\algorithm{remove_zero_components}{Remove all components of an expression that are equal to zero.}"
				}
			],
			"hidden" : true,
			"source" : "\\algorithm{remove_zero_components}{Remove all components of an expression that are equal to zero.}"
		},
		{
			"cell_id" : 9384605071867656007,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def remove_zero_components(ex):\n\t\"\"\"Removes all components of an expression that are equal to 0\"\"\"\n\tfor node in ex[r'\\equals']:\n\t\tif nth_arg(node, 0).name == r'\\comma':\n\t\t\tif nth_arg(node, 1).multiplier == 0:\n\t\t\t\tnode.erase()\n\treturn ex"
		},
		{
			"cell_id" : 16820310678693438548,
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_id" : 11335533851764470440,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 8454698034353519672,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "a_{i} a_{j}"
						}
					],
					"source" : "\\begin{dmath*}{}a_{i} a_{j}\\end{dmath*}"
				},
				{
					"cell_id" : 3443829469399784960,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 5583668205410070713,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\components_{i j}({{x, x} = (k)**2, {x, y} = k l, {x, z} = k m, {y, x} = k l, {y, y} = (l)**2, {y, z} = l m, {z, x} = k m, {z, y} = l m, {z, z} = (m)**2})"
						}
					],
					"source" : "\\begin{dmath*}{}\\square{}_{i}{}_{j}\\left\\{\\begin{aligned}\\square{}_{x}{}_{x}= & {k}^{2}\\\\[-.5ex]\n\\square{}_{x}{}_{y}= & k l\\\\[-.5ex]\n\\square{}_{x}{}_{z}= & k m\\\\[-.5ex]\n\\square{}_{y}{}_{x}= & k l\\\\[-.5ex]\n\\square{}_{y}{}_{y}= & {l}^{2}\\\\[-.5ex]\n\\square{}_{y}{}_{z}= & l m\\\\[-.5ex]\n\\square{}_{z}{}_{x}= & k m\\\\[-.5ex]\n\\square{}_{z}{}_{y}= & l m\\\\[-.5ex]\n\\square{}_{z}{}_{z}= & {m}^{2}\\\\[-.5ex]\n\\end{aligned}\\right.\n\\end{dmath*}"
				},
				{
					"cell_id" : 7287190375061321435,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 17063748820522396204,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\components_{i j}({{x, x} = (k)**2, {x, y} = k l, {x, z} = 0, {y, x} = k l, {y, y} = (l)**2, {y, z} = l m, {z, x} = 0, {z, y} = l m, {z, z} = (m)**2})"
						}
					],
					"source" : "\\begin{dmath*}{}\\square{}_{i}{}_{j}\\left\\{\\begin{aligned}\\square{}_{x}{}_{x}= & {k}^{2}\\\\[-.5ex]\n\\square{}_{x}{}_{y}= & k l\\\\[-.5ex]\n\\square{}_{x}{}_{z}= & 0\\\\[-.5ex]\n\\square{}_{y}{}_{x}= & k l\\\\[-.5ex]\n\\square{}_{y}{}_{y}= & {l}^{2}\\\\[-.5ex]\n\\square{}_{y}{}_{z}= & l m\\\\[-.5ex]\n\\square{}_{z}{}_{x}= & 0\\\\[-.5ex]\n\\square{}_{z}{}_{y}= & l m\\\\[-.5ex]\n\\square{}_{z}{}_{z}= & {m}^{2}\\\\[-.5ex]\n\\end{aligned}\\right.\n\\end{dmath*}"
				},
				{
					"cell_id" : 15670649603979469154,
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_id" : 12155786866166233505,
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\components_{i j}({{x, x} = (k)**2, {x, y} = k l, {y, x} = k l, {y, y} = (l)**2, {y, z} = l m, {z, y} = l m, {z, z} = (m)**2})"
						}
					],
					"source" : "\\begin{dmath*}{}\\square{}_{i}{}_{j}\\left\\{\\begin{aligned}\\square{}_{x}{}_{x}= & {k}^{2}\\\\[-.5ex]\n\\square{}_{x}{}_{y}= & k l\\\\[-.5ex]\n\\square{}_{y}{}_{x}= & k l\\\\[-.5ex]\n\\square{}_{y}{}_{y}= & {l}^{2}\\\\[-.5ex]\n\\square{}_{y}{}_{z}= & l m\\\\[-.5ex]\n\\square{}_{z}{}_{y}= & l m\\\\[-.5ex]\n\\square{}_{z}{}_{z}= & {m}^{2}\\\\[-.5ex]\n\\end{aligned}\\right.\n\\end{dmath*}"
				}
			],
			"ignore_on_import" : true,
			"source" : "{x, y, z}::Coordinate.\n{i, j}::Indices(values={x, y, z}, position=fixed).\nex := a_{i}a_{j};\nevaluate(ex, $a_{x} = k, a_{y} = l, a_{z} = m$);\nsubstitute(ex, $k m -> 0$);\nremove_zero_components(ex);"
		},
		{
			"cell_id" : 2548545959295068830,
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : ""
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1
}
