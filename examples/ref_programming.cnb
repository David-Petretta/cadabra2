{
	"cells" : 
	[
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\section*{Programming in Cadabra}\n\nCadabra is fully programmable in Python. You can make functions which combine various Cadabra algorithms together,\nbut you can also inspect the expression tree and manipulate individual subexpressions."
				}
			],
			"hidden" : true,
			"source" : "\\section*{Programming in Cadabra}\n\nCadabra is fully programmable in Python. You can make functions which combine various Cadabra algorithms together,\nbut you can also inspect the expression tree and manipulate individual subexpressions."
		},
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\subsection*{Traversing the expression tree}\n\nYou can traverse the elements of an expression by using a simple iterator obtained in the usual\nPython way, as the example below shows:"
				}
			],
			"hidden" : true,
			"source" : "\\subsection*{Traversing the expression tree}\n\nYou can traverse the elements of an expression by using a simple iterator obtained in the usual\nPython way, as the example below shows:"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "A + B + C_{m} D^{m}"
						}
					],
					"source" : "\\begin{dmath*}{}A+B+C_{m} D^{m}\\end{dmath*}"
				}
			],
			"source" : "ex:= A + B + C_{m} D^{m};"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "output",
					"source" : "\\begin{verbatim}A + B + C_{m} D^{m}\nA\nB\nC_{m} D^{m}\nC_{m}\nm\nD^{m}\nm\n\\end{verbatim}"
				}
			],
			"source" : "for n in ex:\n\tprint(str(n))"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "output",
					"source" : "\\begin{verbatim}\\sum\nA\nB\n\\prod\nC\nm\nD\nm\n\\end{verbatim}"
				}
			],
			"source" : "for n in ex:\n\tprint(str(n.name))"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\subsection*{Arguments and indices}\n\nThere are various ways to obtain iterators which iterate over all arguments or all indices\nof an expression. The following example, with a derivative acting on a product, prints the \nargument of the derivative as well as all free indices."
				}
			],
			"hidden" : true,
			"source" : "\\subsection*{Arguments and indices}\n\nThere are various ways to obtain iterators which iterate over all arguments or all indices\nof an expression. The following example, with a derivative acting on a product, prints the \nargument of the derivative as well as all free indices."
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property Derivative to~}\\nabla{\\#}.\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\nabla_{m}(A^{n}_{p} V^{p})"
						}
					],
					"source" : "\\begin{dmath*}{}\\nabla_{m}\\left(A^{n}\\,_{p} V^{p}\\right)\\end{dmath*}"
				}
			],
			"source" : "\\nabla{#}::Derivative;\nex:= \\nabla_{m}{ A^{n}_{p} V^{p} };"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "output",
					"source" : "\\begin{verbatim}A^{n}_{p} V^{p}\nm\nn\n\\end{verbatim}"
				}
			],
			"source" : "for nabla in ex[r'\\nabla']:\n\tfor arg in nabla.args():\n\t\tprint(str(arg))\n\tfor i in nabla.free_indices():\n\t\tprint(str(i))"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "\\subsection*{Example: covariant derivatives}\n\nThe following example shows how you might implement the expansion of a covariant derivative\ninto partial derivatives and connection terms."
				}
			],
			"hidden" : true,
			"source" : "\\subsection*{Example: covariant derivatives}\n\nThe following example shows how you might implement the expansion of a covariant derivative\ninto partial derivatives and connection terms."
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : "def expand_nabla(ex):\n    for nabla in ex[r'\\nabla']:\n        nabla.name=r'\\partial'\n        dindex = nabla.indices().__next__() \n        for arg in nabla.args():             \n            ret:=0;\n            for index in arg.free_indices():\n                t2:= @(arg);\n                if index.parent_rel==sub:\n                    t1:= -\\Gamma^{p}_{@(dindex) @(index)};\n                    t2[index]:= _{p};\n                else:\n                    t1:=  \\Gamma^{@(index)}_{@(dindex) p};\n                    t2[index]:= ^{p};\n                ret += t1 * t2\n            nabla += ret\n    return ex"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "latex",
			"cells" : 
			[
				{
					"cell_origin" : "client",
					"cell_type" : "latex_view",
					"source" : "The sample expressions below show how this automatically takes care of not\nintroducing connections for dummy indices, and how it automatically handles indices which\nare more complicated than single symbols."
				}
			],
			"hidden" : true,
			"source" : "The sample expressions below show how this automatically takes care of not\nintroducing connections for dummy indices, and how it automatically handles indices which\nare more complicated than single symbols."
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"source" : "\\begin{dmath*}{}\\text{Attached property Derivative to~}\\nabla{\\#}.\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\nabla_{a}(h^{b}_{c})"
						}
					],
					"source" : "\\begin{dmath*}{}\\nabla_{a}{h^{b}\\,_{c}}\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\partial_{a}(h^{b}_{c}) + \\Gamma^{b}_{a p} h^{p}_{c}-\\Gamma^{p}_{a c} h^{b}_{p}"
						}
					],
					"source" : "\\begin{dmath*}{}\\partial_{a}\\left(h^{b}\\,_{c}\\right)+\\Gamma^{b}\\,_{a p} h^{p}\\,_{c}-\\Gamma^{p}\\,_{a c} h^{b}\\,_{p}\\end{dmath*}"
				}
			],
			"source" : "\\nabla{#}::Derivative;\nex:= \\nabla_{a}{ h^{b}_{c} }; \nexpand_nabla(ex);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\nabla_{a}(v_{b} w^{b})"
						}
					],
					"source" : "\\begin{dmath*}{}\\nabla_{a}\\left(v_{b} w^{b}\\right)\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\partial_{a}(v_{b} w^{b})"
						}
					],
					"source" : "\\begin{dmath*}{}\\partial_{a}\\left(v_{b} w^{b}\\right)\\end{dmath*}"
				}
			],
			"source" : "ex:= \\nabla_{a}{ v_{b} w^{b} };\nexpand_nabla(ex);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"cells" : 
			[
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\nabla_{\\hat{a}}(h_{b c} v^{c})"
						}
					],
					"source" : "\\begin{dmath*}{}\\nabla_{\\widehat{a}}\\left(h_{b c} v^{c}\\right)\\end{dmath*}"
				},
				{
					"cell_origin" : "server",
					"cell_type" : "latex_view",
					"cells" : 
					[
						{
							"cell_origin" : "server",
							"cell_type" : "input_form",
							"source" : "\\partial_{\\hat{a}}(h_{b c} v^{c})-\\Gamma^{p}_{\\hat{a} b} h_{p c} v^{c}"
						}
					],
					"source" : "\\begin{dmath*}{}\\partial_{\\widehat{a}}\\left(h_{b c} v^{c}\\right)-\\Gamma^{p}\\,_{\\widehat{a} b} h_{p c} v^{c}\\end{dmath*}"
				}
			],
			"source" : "ex:= \\nabla_{\\hat{a}}{ h_{b c} v^{c} };\nexpand_nabla(ex);"
		},
		{
			"cell_origin" : "client",
			"cell_type" : "input",
			"source" : ""
		}
	],
	"description" : "Cadabra JSON notebook format",
	"version" : 1
}
