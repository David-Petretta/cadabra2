{
	"cell_id": 7836342630161262192,
	"cells": [
		{
			"cell_id": 15181707112407147179,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 6516150315733905146,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\section*{Gamma matrix algebra (Clifford algebras)}\n\nCadabra can do gamma matrix algebra in an arbitrary number of dimensions. The example below shows how to work out \nthe particular gamma matrix contraction\n\\begin{equation*}\n\\Gamma_{s r} \\Gamma_{r l} \\Gamma_{k m} \\Gamma_{m s}\\,,\n\\end{equation*}\nwhich is not impossible to do by hand, but certainly much nicer with Cadabra. As always, we first need to declare\nthe symbols we are going to use. "
				}
			],
			"hidden": true,
			"source": "\\section*{Gamma matrix algebra (Clifford algebras)}\n\nCadabra can do gamma matrix algebra in an arbitrary number of dimensions. The example below shows how to work out \nthe particular gamma matrix contraction\n\\begin{equation*}\n\\Gamma_{s r} \\Gamma_{r l} \\Gamma_{k m} \\Gamma_{m s}\\,,\n\\end{equation*}\nwhich is not impossible to do by hand, but certainly much nicer with Cadabra. As always, we first need to declare\nthe symbols we are going to use. "
		},
		{
			"cell_id": 13736011136748361918,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 16359960956223444064,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Indices(position=free) attached to~}\\left[s, \\discretionary{}{}{}r, \\discretionary{}{}{}l, \\discretionary{}{}{}k, \\discretionary{}{}{}m, \\discretionary{}{}{}n\\right].\\end{dmath*}"
				},
				{
					"cell_id": 17463746679506917715,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Integer attached to~}\\left[s, \\discretionary{}{}{}r, \\discretionary{}{}{}l, \\discretionary{}{}{}k, \\discretionary{}{}{}m, \\discretionary{}{}{}n\\right].\\end{dmath*}"
				},
				{
					"cell_id": 9131536127881142319,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property GammaMatrix attached to~}\\backslash\\texttt{Gamma}\\{\\#\\}.\\end{dmath*}"
				},
				{
					"cell_id": 9970177242382691336,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property KroneckerDelta attached to~}\\delta_{m n}.\\end{dmath*}"
				}
			],
			"source": "{s,r,l,k,m,n}::Indices(vector);\n{s,r,l,k,m,n}::Integer(0..d-1);\n\\Gamma_{#}::GammaMatrix(metric=\\delta);\n\\delta_{m n}::KroneckerDelta;"
		},
		{
			"cell_id": 14916208636544326190,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 14194647839644370116,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "After every step in which we work out the product of two generalised gamma matrices, we need a number of algorithms\nto simplify the result. We will use the mechanism of defining a \\verb|post_process| function, which gets called after\nevery Cadabra function call. Note how every algorithm that is called in here acts on the same expression; you do not have to \ndo things like \\verb|ex = sort_product(ex)|."
				}
			],
			"hidden": true,
			"source": "After every step in which we work out the product of two generalised gamma matrices, we need a number of algorithms\nto simplify the result. We will use the mechanism of defining a \\verb|post_process| function, which gets called after\nevery Cadabra function call. Note how every algorithm that is called in here acts on the same expression; you do not have to \ndo things like \\verb|ex = sort_product(ex)|."
		},
		{
			"cell_id": 12607813013912134810,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def post_process(ex):\n\tsort_product(ex)\n\teliminate_kronecker(ex)\n\tcanonicalise(ex)\n\tcollect_terms(ex)"
		},
		{
			"cell_id": 1785829096969371759,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 17004817770334712017,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "The expression which we want to simplify reads"
				}
			],
			"hidden": true,
			"source": "The expression which we want to simplify reads"
		},
		{
			"cell_id": 2205276562613272511,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 82935383606815926,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 13260894866853173166,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "-\\Gamma_{m r} \\Gamma_{l m} \\Gamma_{k s} \\Gamma_{r s}"
						}
					],
					"source": "\\begin{dmath*}{}-\\,\\Gamma_{m r} \\Gamma_{l m} \\Gamma_{k s} \\Gamma_{r s}\\end{dmath*}"
				}
			],
			"source": "ex:=\\Gamma_{s r} \\Gamma_{r l} \\Gamma_{k m} \\Gamma_{m s};"
		},
		{
			"cell_id": 2748886865497035333,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 7565631776140811989,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "We need to join and distribute three times to merge all four generalised gamma matrices, so"
				}
			],
			"hidden": true,
			"source": "We need to join and distribute three times to merge all four generalised gamma matrices, so"
		},
		{
			"cell_id": 10942172291160346011,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 11701630706278017846,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 7267858631944983333,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\Gamma_{k l} (-18d + 8d d + 12-d d d) + \\delta_{k l} (-3 + 6d-4d d + d d d)"
						}
					],
					"source": "\\begin{dmath*}{}\\Gamma_{k l} \\left(-18\\,d\\discretionary{}{}{}+8\\,d d\\discretionary{}{}{}+12\\,\\discretionary{}{}{}-\\,d d d\\right)\\discretionary{}{}{}+\\delta_{k l} \\left(-3\\,\\discretionary{}{}{}+6\\,d\\discretionary{}{}{}-4\\,d d\\discretionary{}{}{}+d d d\\right)\\end{dmath*}"
				}
			],
			"source": "for i in range(3):\n\tjoin_gamma(_)\n\tdistribute(_)\nfactor_in(_, $d$);"
		},
		{
			"cell_id": 1938335043474642649,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 647755519203709355,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 10879512807052220584,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\Gamma_{k l} (-18d + 8(d)**2 + 12-(d)**3) + \\delta_{k l} (-3 + 6d-4(d)**2 + (d)**3)"
						}
					],
					"source": "\\begin{dmath*}{}\\Gamma_{k l} \\left(-18\\,d\\discretionary{}{}{}+8\\,{d}^{2\\,}\\discretionary{}{}{}+12\\,\\discretionary{}{}{}-\\,{d}^{3\\,}\\right)\\discretionary{}{}{}+\\delta_{k l} \\left(-3\\,\\discretionary{}{}{}+6\\,d\\discretionary{}{}{}-4\\,{d}^{2\\,}\\discretionary{}{}{}+{d}^{3\\,}\\right)\\end{dmath*}"
				}
			],
			"source": "collect_factors(ex);"
		},
		{
			"cell_id": 4783681678151271461,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 2436902490514838396,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "That's the answer we wanted to compute, much easier than by hand."
				}
			],
			"hidden": true,
			"source": "That's the answer we wanted to compute, much easier than by hand."
		},
		{
			"cell_id": 10887901339884211899,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"flags": {
		"hide_input_cells": false
	},
	"version": 1.0
}
